name: Deploy to Azure App Service

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install production dependencies only
      run: |
        # Clean install with production only
        npm ci --omit=dev --silent
        
        # Remove unnecessary files from node_modules
        find node_modules -name "*.md" -type f -delete 2>/dev/null || true
        find node_modules -name "*.txt" -type f -delete 2>/dev/null || true
        find node_modules -name "*.yml" -type f -delete 2>/dev/null || true
        find node_modules -name "*.yaml" -type f -delete 2>/dev/null || true
        find node_modules -name "CHANGELOG*" -type f -delete 2>/dev/null || true
        find node_modules -name "LICENSE*" -type f -delete 2>/dev/null || true
        find node_modules -name "NOTICE*" -type f -delete 2>/dev/null || true
        rm -rf node_modules/.cache 2>/dev/null || true
        rm -rf node_modules/*/test 2>/dev/null || true
        rm -rf node_modules/*/tests 2>/dev/null || true
        rm -rf node_modules/*/docs 2>/dev/null || true
        rm -rf node_modules/*/.github 2>/dev/null || true
    
    - name: Create optimized deployment artifact
      run: |
        echo "Creating deployment directory..."
        mkdir deploy
        
        echo "Checking what files are available..."
        ls -la
        
        # Copy essential application files (check if they exist first)
        [ -f package.json ] && cp package.json deploy/ || echo "package.json not found"
        [ -f index.js ] && cp index.js deploy/ || echo "index.js not found"
        [ -f bot.js ] && cp bot.js deploy/ || echo "bot.js not found"
        [ -f config.js ] && cp config.js deploy/ || echo "config.js not found"
        [ -f database.js ] && cp database.js deploy/ || echo "database.js not found"
        [ -f scheduler.js ] && cp scheduler.js deploy/ || echo "scheduler.js not found"
        [ -f locationAliases.js ] && cp locationAliases.js deploy/ || echo "locationAliases.js not found"
        [ -f web.config ] && cp web.config deploy/ || echo "web.config not found"
        
        # Copy deployment configuration files if they exist
        [ -f .deployment ] && cp .deployment deploy/ || echo ".deployment not found - creating basic one"
        if [ ! -f deploy/.deployment ]; then
          echo "[config]" > deploy/.deployment
          echo "project = ." >> deploy/.deployment
        fi
        
        [ -f .deployignore ] && cp .deployignore deploy/ || echo ".deployignore not found"
        
        # Copy essential directories if they exist
        [ -d utils ] && cp -r utils deploy/ || echo "utils directory not found"
        [ -d cards ] && cp -r cards deploy/ || echo "cards directory not found"
        [ -d data ] && cp -r data deploy/ || echo "data directory not found"
        [ -d teams-package ] && cp -r teams-package deploy/ || echo "teams-package directory not found"
        
        # Copy optimized node_modules
        [ -d node_modules ] && cp -r node_modules deploy/ || echo "node_modules not found"
        
        # Show deployment contents
        echo "Deployment package contents:"
        ls -la deploy/
        echo "Deployment size:"
        du -sh deploy/
        echo "File count:"
        find deploy -type f | wc -l
    
    - name: Create deployment package
      run: |
        cd deploy
        echo "Creating deployment zip..."
        zip -r ../deployment.zip . -x "*.git*" "*.DS_Store*"
        cd ..
        echo "Deployment package size:"
        ls -lh deployment.zip
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure App Service
      run: |
        echo "Deploying to Azure App Service..."
        az webapp deployment source config-zip \
          --resource-group rg-location-bot \
          --name location-bot-app \
          --src deployment.zip
        
        echo "Deployment completed successfully!"
        
        # Show deployment status
        az webapp show \
          --resource-group rg-location-bot \
          --name location-bot-app \
          --query "state" \
          --output tsv 