# Deployment workflow for Azure App Service - Optimized for minimal file count
name: Deploy to Azure App Service

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Analyze dependencies and create minimal build
      run: |
        echo "Creating ultra-minimal deployment with selective dependencies..."
        
        # Install dependencies locally to analyze what's actually needed
        npm ci --silent
        
        # Create minimal deploy directory
        mkdir deploy
        
        # Copy only essential application files
        cp package.json deploy/
        cp index.js deploy/
        cp bot.js deploy/
        cp config.js deploy/
        cp database.js deploy/
        cp scheduler.js deploy/
        cp locationAliases.js deploy/
        cp web.config deploy/
        
        # Copy essential directories
        cp -r utils deploy/ 2>/dev/null || true
        cp -r cards deploy/ 2>/dev/null || true
        cp -r data deploy/ 2>/dev/null || true
        cp -r teams-package deploy/ 2>/dev/null || true
        
        # Create deployment configuration
        echo "[config]" > deploy/.deployment
        echo "project = ." >> deploy/.deployment
        
        echo "Application files copied. Current file count:"
        find deploy -type f | wc -l
    
    - name: Create minimal node_modules with only essential runtime files
      run: |
        cd deploy
        mkdir node_modules
        
        echo "Manually copying only essential runtime dependencies..."
        
        # Copy only the essential runtime files for each dependency
        # This avoids the massive dependency tree and focuses on runtime essentials
        
        # Core dependencies - copy only main runtime files
        echo "Copying botbuilder essentials..."
        mkdir -p node_modules/botbuilder
        cp -r ../node_modules/botbuilder/lib node_modules/botbuilder/ 2>/dev/null || true
        cp ../node_modules/botbuilder/package.json node_modules/botbuilder/ 2>/dev/null || true
        
        echo "Copying restify essentials..."
        mkdir -p node_modules/restify
        cp -r ../node_modules/restify/lib node_modules/restify/ 2>/dev/null || true
        cp ../node_modules/restify/package.json node_modules/restify/ 2>/dev/null || true
        
        echo "Copying mssql essentials..."
        mkdir -p node_modules/mssql
        cp -r ../node_modules/mssql/lib node_modules/mssql/ 2>/dev/null || true
        cp ../node_modules/mssql/package.json node_modules/mssql/ 2>/dev/null || true
        
        echo "Copying dotenv essentials..."
        mkdir -p node_modules/dotenv
        cp -r ../node_modules/dotenv/lib node_modules/dotenv/ 2>/dev/null || true
        cp ../node_modules/dotenv/package.json node_modules/dotenv/ 2>/dev/null || true
        
        echo "Copying moment-timezone essentials..."
        mkdir -p node_modules/moment-timezone
        cp ../node_modules/moment-timezone/*.js node_modules/moment-timezone/ 2>/dev/null || true
        cp ../node_modules/moment-timezone/package.json node_modules/moment-timezone/ 2>/dev/null || true
        
        echo "Copying axios essentials..."
        mkdir -p node_modules/axios
        cp -r ../node_modules/axios/lib node_modules/axios/ 2>/dev/null || true
        cp ../node_modules/axios/package.json node_modules/axios/ 2>/dev/null || true
        
        echo "Copying openai essentials..."
        mkdir -p node_modules/openai
        cp -r ../node_modules/openai/dist node_modules/openai/ 2>/dev/null || true
        cp ../node_modules/openai/package.json node_modules/openai/ 2>/dev/null || true
        
        echo "Copying node-schedule essentials..."
        mkdir -p node_modules/node-schedule
        cp -r ../node_modules/node-schedule/lib node_modules/node-schedule/ 2>/dev/null || true
        cp ../node_modules/node-schedule/package.json node_modules/node-schedule/ 2>/dev/null || true
        
        # Copy critical sub-dependencies that are commonly required
        echo "Copying essential sub-dependencies..."
        
        # Copy only the most critical sub-dependencies
        for dep in uuid debug ms semver; do
          if [ -d "../node_modules/$dep" ]; then
            echo "Copying $dep..."
            mkdir -p "node_modules/$dep"
            cp "../node_modules/$dep/package.json" "node_modules/$dep/" 2>/dev/null || true
            cp "../node_modules/$dep/index.js" "node_modules/$dep/" 2>/dev/null || true
            cp -r "../node_modules/$dep/lib" "node_modules/$dep/" 2>/dev/null || true
            cp -r "../node_modules/$dep/dist" "node_modules/$dep/" 2>/dev/null || true
          fi
        done
        
        cd ..
        echo "After selective dependency copying:"
        find deploy -type f | wc -l
        echo "Deploy directory size:"
        du -sh deploy/
    
    - name: Create production package.json with minimal dependencies
      run: |
        cd deploy
        
        # Create a minimal package.json that only lists what we actually copied
        cat > package.json << 'EOF'
        {
          "name": "location-bot",
          "version": "1.0.0",
          "description": "A Microsoft Teams bot for tracking employee work locations",
          "main": "index.js",
          "engines": {
            "node": "18.x"
          },
          "scripts": {
            "start": "node index.js"
          },
          "dependencies": {
            "botbuilder": "^4.20.0",
            "restify": "^11.1.0",
            "mssql": "^10.0.1",
            "dotenv": "^16.3.1",
            "moment-timezone": "^0.5.43",
            "axios": "^1.6.0",
            "openai": "^4.20.1",
            "node-schedule": "^2.1.1"
          },
          "keywords": ["teams", "bot", "location", "microsoft"],
          "author": "Your Organization",
          "license": "MIT"
        }
        EOF
        
        echo "Created minimal package.json"
        cd ..
    
    - name: Final cleanup and create deployment package
      run: |
        cd deploy
        
        echo "Performing final cleanup..."
        
        # Remove any remaining unnecessary files
        find . -name "*.md" -type f -delete 2>/dev/null || true
        find . -name "*.txt" -type f -delete 2>/dev/null || true
        find . -name "*.map" -type f -delete 2>/dev/null || true
        find . -name "*.d.ts" -type f -delete 2>/dev/null || true
        find . -name ".DS_Store" -type f -delete 2>/dev/null || true
        find . -name "Thumbs.db" -type f -delete 2>/dev/null || true
        find . -name "*.log" -type f -delete 2>/dev/null || true
        find . -name "test*" -type f -delete 2>/dev/null || true
        find . -name "*test*" -type f -delete 2>/dev/null || true
        
        # Remove empty directories
        find . -type d -empty -delete 2>/dev/null || true
        
        echo "FINAL file count after ultra-minimal approach:"
        find . -type f | wc -l
        
        echo "Creating deployment ZIP..."
        zip -r ../deployment.zip . --quiet
        
        cd ..
        
        echo "Final deployment package info:"
        ls -lh deployment.zip
        echo "Files in deployment ZIP:"
        unzip -l deployment.zip | tail -1
        
        echo "Deployment optimization complete!"
        echo "Target achieved: Ultra-minimal deployment with selective dependencies"
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure App Service
      run: |
        echo "Deploying ultra-minimal package to Azure App Service..."
        az webapp deployment source config-zip \
          --resource-group rg-location-bot \
          --name location-bot-app \
          --src deployment.zip
        
        echo "Deployment completed successfully!"
        
        # Show deployment status
        az webapp show \
          --resource-group rg-location-bot \
          --name location-bot-app \
          --query "state" \
          --output tsv 